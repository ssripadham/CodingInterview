/*
  A 1
  B 1
  C 1
  
  maxLen = 6
  
  A B C
  11 3 5
  
  A D O B  E C O D E B A N C
        *    *
*/
class Solution {
     unordered_map<char, int> my_map;
    
private:
    
    void initialize_map(const string & t) {
        for (int i = 0; i < t.length(); ++i){
            auto iter = my_map.find(t[i]);
            if (iter == my_map.end()){
                my_map[t[i]] = -1;
            } else {
                my_map[t[i]]--;
            }
        }  
    }
    
    bool isAllCharsFound(const string & t){
        for (int i = 0; i < t.length(); ++i){
            auto iter = my_map.find(t[i]);
            if (iter == my_map.end()){
                return false;
            }
            if (my_map[t[i]] < 0) return false;
        }
        return true;
    }
    
public:
    
    string minWindow(string s, string t) {
        
       initialize_map(t);
       
        int start = 0;
        int max_len = INT_MAX;
        
        int end = 0;
        int i = 0;
        string output("");
        while (i < s.length()){
            
            if(my_map.find(s[i]) != my_map.end()){
                start = i;
                end = i;
                break;
            }
            ++i;
        }
        
        //end++;
        while (end < s.length()){
            
            if (my_map.find(s[end]) != my_map.end()){
                my_map[s[end]]++;
           
            
                while (isAllCharsFound(t)) {
                    
                    //Register maxLength
                    if (end-start+1 <= max_len){
                        max_len = end-start+1;
                        output = s.substr(start,max_len);
                    }
                    
                    my_map[s[start]]--;
                    start++;
                }
                    //Increase start until you find a char in t                    
                while (start <= end){
                        if (my_map.find(s[start]) != my_map.end()){
                            break;
                        }
                        ++start;
                }
            }
            ++end;
        }
        
        if (isAllCharsFound(t)) {
            cout<<"*"<<end<<" "<<start<<endl;
            if (end-start <= max_len){
                max_len = end-start+1;
                output = s.substr(start,max_len);
            }
        }
        
        return output;
    }
};
